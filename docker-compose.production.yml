version: '3'
services:
  db:
    restart: always
    image: postgres:16-alpine
    volumes:
      - pgdbdata:/var/lib/postgresql/data/
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U $POSTGRES_USER -d $POSTGRES_DB']
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    env_file: .env

  backend:
    restart: always
    image: aleksey2299/security_backend:latest
    entrypoint: /code/backend_entrypoint.sh
    volumes:
      - static:/backend_static
      - media:/code/media
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ['CMD', 'nc', '-z', '0.0.0.0', '8000']
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 10s
    env_file: .env

  redis:
    restart: always
    image: redis:7.2.5-alpine
    expose:
      - 6379

  worker:
    restart: always
    image: aleksey2299/security_backend:latest
    command: celery -A main worker -B -l info
    volumes:
      - media:/code/media
    env_file: .env
    depends_on:
      backend:
        condition: service_healthy
      redis:
        condition: service_started

  # update_prices:
  #   build: ./backend
  #   command: python manage.py update_prices
  #   volumes:
  #     - ./backend:/code/
  #   depends_on:
  #     - db

  # bot:
  #   build: ./backend/
  #   command: python manage.py bot
  #   volumes:
  #     - ./backend:/code
  #   depends_on:
  #     - db

  next:
    restart: always
    image: natashasolntseva/security_frontend:latest
    env_file: .env
    depends_on:
      backend:
        condition: service_healthy

  nginx:
    restart: always
    image: aleksey2299/security_nginx:latest
    env_file: .env
    ports:
      - 8000:80
      - 443:443
    volumes:
      - static:/static/
      - media:/media/
      - certs:/etc/letsencrypt
    depends_on:
      backend:
        condition: service_healthy

volumes:
  pgdbdata:
  static:
  media:
  certs:
